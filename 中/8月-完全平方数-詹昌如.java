完全平方数

/*
给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.

示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.
*/
/*
*思路：该题为动态规划题。先找找规律
* n = 1  1
* n = 2  1 1
* n = 3  1 1 1
* n = 4  4
* n = 5  1 4
* n = 6  1 1 4
* n = 7  1 1 1 4
* n = 8  4 4 
* n = 9  9
* n = 10 1 9
* n = 11 1 1 9
* n = 12 4 4 4
* n = 13 4 9
* n = 14 1 4 9
* n = 15 1 1 4 9
* n = 16 16
* n = 17 1 16
* n = 18 9 9 
* n = 19 1 9 9
* n = 20 4 16
* ...
*总结：可以看出规律，完全平方数最少的可能性有：1，2，3，4四种，若让完全平方数个数最少，则结果中最多为4个，如果能被4整除的，就等于让n/4；
*直到不能被4整除的余下的数就是完全平方数，如果拿8做被除数余数为7，则完全平方数就是4，通过不断
*循环判断让完全平方数为2，剩下的就是3
*/

class Solution {
	public int numSquares(int n) {
		while(n % 4 == 0) {
			n /= 4;
		}
		if (n % 8 == 7) {
			return 4;
		}
		for (int i = 0; i * i <= n; i++) {// 循环判断
			int m = (int)(Math.sqrt(n - i * i));
			if (i * i + m * m == n && i >=0 && m >= 0)  {
				return 2;
			}
		}
		return 3;
	}
}